---
alwaysApply: true
---

# Radix‑UI integration guidelines

- Build every component on top of a Radix primitive (`@radix-ui/react-*`).
- Always choose the Radix primitive whose name is the nearest semantic match to the Figma component’s data‑name.
- When you need to render a custom DOM element, pass **`asChild`** so Radix props/refs still reach it.
- Merge classes with `clsx('vibe-{ComponentName}', props.className)`; **never** overwrite the classes Radix injects.
- Keep Radix state props (`open`, `checked`, etc.) **controlled** unless the spec calls for uncontrolled behaviour.

# Component detection & reuse guidelines

| Rule                                                                   | Example                                   |
| ---------------------------------------------------------------------- | ----------------------------------------- |
| `data-name` starts with a capital → separate component                 | `Tooltip`                                 |
| `Parent/Child` and **first segment equals parent name** → subcomponent | `Button/Icon` → `Button/components/Icon/` |

- Before coding a new component, search `src/components` for an existing match (case‑insensitive):
  - If it exists, **reuse** it.
  - If it lacks a prop you need, update logic, styles and story files, extend its type file by **adding optional props only** — never break existing signatures.

# Creating new components guidelines

- Generate a folder that follows the **Architecture conventions** and **Architecture guideline**.
- **Never** use class components.
- **Never** use inline styles (except dynamic CSS variables); static styling lives in SCSS.
- **Never** add extra states or animations beyond what the design specifies.

# Component properties guidelines

- **Never** invent props that are absent from the design, except those strictly required for technical implementation (e.g., className, style, data-testid).
- If a component exposes the `content` or `slot` prop, treat its value as React children.
- When the prop’s name is `slot`, ignore any placeholder graphics coming from Figma (typically a “Placeholder” frame) and substitute the literal string "Placeholder" in the rendered output.

# Code style

- Set `displayName = '{ComponentName}'` for React DevTools.
- Apply default values via ES2015 parameter defaults, not defaultProps.
- Avoid `any;` prefer `unknown` plus type narrowing.
- Document every exported component, type, interface, enum and public prop with JSDoc so VS Code shows rich IntelliSense.

# Accessibility guidelines

- Preserve all ARIA attributes/roles forwarded by Radix.
- Attach `role`, `aria-*`, and `tabIndex` to any custom interactive element.
- Use Radix’s `<VisuallyHidden>` for non‑visual labels.

# Testing hooks

- Expose a stable data-testid equal to the component name in kebab case (e.g., `data-testid="tooltip"`).
- Storybook auto‑generates snapshots; do not commit manual snapshots.
